<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Definitions
cur_state=0;
next_state=0;
state_timer=0;

enum state{
    standing=0,
    walking=1,
    jump_up=2,
    jump_moving=3,
    falling=4,
    hanging=5
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics properties
//Gravity
gravity_normal=.25;
gravity_current=gravity_normal;
gravity_direction_normal=270;
gravity_direction_current=gravity_direction_normal;

//Jump
jump_velocity=8;
air_control_accel=.15;
air_control_max_speed=1.5;
air_control_friction=.3;

//Speeds
walk_accel=.2;
walk_friction=.3;
walk_max_speed=2;
run_max_speed=4;
run_accel=.1;
move_max_speed=walk_max_speed;


x_speed=0;
y_speed=0;

//Orientation and Other properties.
facing=dir_right;
is_grounded=true;
is_falling=false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Variables
left = false;
right = false;
up = false;
down = false;
jump = false;
grab = false;

//Controller Configuration
button_left=ord("A");
button_right=ord("D");
button_up=ord("W");
button_down=ord("S");
button_jump=vk_space;
button_run=vk_shift;
button_grab=vk_control;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read controls.
left  = keyboard_check(button_left);
right = keyboard_check(button_right);
up    = keyboard_check(button_up);
down  = keyboard_check(button_down);
jump  = keyboard_check(button_jump);
jump_pressed = keyboard_check_pressed(button_jump);
grab  = keyboard_check(button_grab);
run   = keyboard_check(button_run);

//Handle some special cases
if(left &amp;&amp; right)
{
    left=false;
    right=false;
}











    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Standing
if(cur_state = state.standing)
{   
    if(state_timer==0)
    {
        //keyboard_clear(button_jump);
        //jump=false;
        move_max_speed=walk_max_speed;
        if(abs(x_speed)&gt;move_max_speed)
            x_speed=move_max_speed*facing;
    }
    //Read Controls
    image_blend=c_white;
    var dir=0;
    if(right)
        dir=dir_right;
    else if (left)
        dir=dir_left;
    
    if(dir !=0)
    {
        if(dir == facing)
        {
            if(!place_meeting(x + 1*dir,y-1,obj_block))
                state_switch(state.walking);
        }
        else
        {
            facing*=-1;
        }
        
    }
    else
    {
        if(x_speed&gt;0)
            x_speed=max(x_speed-walk_friction,0);
        else if(x_speed&lt;0)
            x_speed=min(x_speed+walk_friction,0);
        else
            x_speed=0;
    }
    
    y_speed=0; //We are standing, so... you know, no reason to be moving up or down.
        
    if(jump_pressed)
        state_switch(state.jump_up); //Standing Jump State
    
    move_horizontal();
    
    //Check for falling (I don't know, maybe the platform they were standing on disppeared?)
    if(!place_meeting( x, y + 1, obj_block))
        state_switch(state.falling);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Walking/Running
if(cur_state==state.walking)
{   
    image_blend=c_green;
    
    if(state_timer==0)
    {
        //show_debug_message("Switching to walking/running, clearing spacebar.");
        //keyboard_clear(button_jump);
        //jump=false;
    }
    
    //Read Controls
    var dir=0;
    if(right)
        dir=dir_right;
    else if (left)
        dir=dir_left;
    
    //Toggle Run
    if(run)
        move_max_speed=min(move_max_speed+run_accel,run_max_speed);
    else if(move_max_speed&gt;walk_max_speed)
        move_max_speed=max(walk_max_speed,move_max_speed-walk_friction);

    //Accellerate based on facing direction.
    if(dir !=0)
    {
        if(dir == facing)
        {
            x_speed+= walk_accel*facing;
            if(abs(x_speed)&gt;move_max_speed)
            {   //Enforce Speed Limit
                x_speed=move_max_speed*facing;
            }
        }
        else
        {
            facing*=-1;
            x_speed*=.5;
            move_max_speed=walk_max_speed;
        }
        
    }
    else
        state_switch(state.standing);
    
    y_speed=0; //We are standing, so... you know, no reason to be moving up or down.

        
    //Collision
    if(move_horizontal())
        state_switch(state.standing);
    
    //Check for falling (I don't know, maybe the platform they were standing on disppeared?)
    if(!place_meeting( x, y + 1, obj_wall))
        state_switch(state.falling);
        
    if(jump_pressed)
        state_switch(state.jump_moving); //Standing Jump State
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Falling
if(cur_state==state.falling)
{
    if(state_timer==0)
    {
        is_falling=true;
        y_speed=0;
    }
    
    //Air Control
    var dir=0;
    if(right)
        dir=dir_right;
    else if (left)
        dir=dir_left;
    
    if(dir !=0)
    {
        if(dir == facing)
        {
            x_speed+= air_control_accel*facing;
            if(abs(x_speed) &gt; move_max_speed)
            {
                x_speed=move_max_speed*facing;
            }
        }
        else
        {
            move_max_speed=air_control_max_speed;
            facing*=-1;
        } 
    }
    else
    {
        if(x_speed&gt;0)
            x_speed=max(x_speed-air_control_friction,0);
        else if(x_speed&lt;0)
            x_speed=min(x_speed+air_control_friction,0);
        else
            x_speed=0;
    }
    move_horizontal();
    
    image_blend=c_blue;
    y_speed+=gravity_current;
    //Vertical Movement 
    repeat (ceil(abs(y_speed)))
    {
        if (place_meeting(x, y + sign(y_speed), obj_block))
        {
            y_speed=0;
            if(left || right)
                state_switch(state.walking);
            else
                state_switch(state.standing);
        }
        else
            y+= sign(y_speed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Jump Up
//A standing jump.
if(cur_state==state.jump_up)
{   
    if(state_timer==0)
    {   //Initial Jump
        y_speed=-jump_velocity;
        is_falling=false;
        move_max_speed=air_control_max_speed;
    }
    
    //Read Controls
    image_blend=c_aqua;
    var dir=0;
    if(right)
        dir=dir_right;
    else if (left)
        dir=dir_left;
    
    if(dir !=0)
    {
        if(dir == facing)
        {
            x_speed+= air_control_accel*facing;
            x_speed=min(abs(x_speed),air_control_max_speed)*facing;
        }
        else
        {
            facing*=-1;
        } 
    }
    else
    {
        if(x_speed&gt;0)
            x_speed=max(x_speed-air_control_friction,0);
        else if(x_speed&lt;0)
            x_speed=min(x_speed+air_control_friction,0);
        else
            x_speed=0;
    }
    move_horizontal();
    
    if(!jump || y_speed&gt;=0)
        state_switch(state.falling);
    
    //Vertical Movement 
    switch(move_vertical())
    {
        case 1:keyboard_clear(button_jump);state_switch(state.standing);break;
        case -1:state_switch(state.falling);break;
    }
    y_speed+=gravity_current;
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State: Jump Moving
if(cur_state == state.jump_moving)
{
    if(state_timer==0)
    {   //Initial Jump
        y_speed=-jump_velocity;
        is_falling=false;
    }
    
    //Read Controls
    image_blend=c_purple;
    var dir=0;
    if(right)
        dir=dir_right;
    else if (left)
        dir=dir_left;
    
    if(dir !=0)
    {
        if(dir == facing)
        {
            x_speed+= air_control_accel*facing;
            if(abs(x_speed)&gt;move_max_speed)
            {
                x_speed=move_max_speed*facing;
            }
        }
    }

    move_horizontal();
    
    if(!jump &amp;&amp; y_speed&lt;0 &amp;&amp; !is_falling)
    {
        y_speed=0;
        is_falling=true;
    }
    
    //Vertical Movement 
    switch(move_vertical())
    {
        case 1:
            if(left||right)
                state_switch(state.walking);
              else
                state_switch(state.standing);
            break;
        case -1:y_speed=0;break;
    }
    y_speed+=gravity_current;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch States
if(next_state != cur_state)
{
    state_timer=0;
    cur_state=next_state;
}
else
    state_timer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,127</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
